@startuml

' Core Components
class Simulation {
  - current_time: float
  - time_step: float
  - network: Network
  - matrices: DecisionMatrices
  - optimizer: BaseOptimizer
  + run(duration: float)
  + pause()
  + resume()
  + reset()
  + set_optimizer(optimizer: BaseOptimizer)
}

class DecisionMatrices {
  - matrix_a: Matrix  ' Coverage zones (pre-computed)
  - matrix_b: Matrix  ' Power state decisions (to optimize)
  - matrix_k: Matrix  ' Request generation (Poisson distribution)
  - matrix_x: Matrix  ' Request assignment (real-time)
  + compute_coverage_zones()
  + generate_request_matrix()
  + update_assignment_matrix()
  + get_matrix(name: str): Matrix
  + set_matrix(name: str, matrix: Matrix)
}

abstract class BaseOptimizer {
  # matrices: DecisionMatrices
  # network: Network
  + {abstract} optimize_power_states()
  + {abstract} initialize()
  # evaluate_power_efficiency()
}

class GeneticOptimizer extends BaseOptimizer {
  - population_size: int
  - mutation_rate: float
  - crossover_rate: float
  + optimize_power_states()
  - select_parents()
  - crossover()
  - mutate()
}

class Matrix {
  - data: ndarray
  - name: str
  + update(data: ndarray)
  + get_value(i: int, j: int): float
  + set_value(i: int, j: int, value: float)
  + apply_mask(mask: ndarray)
}

class Network {
  - nodes: List<NetworkNode>
  - communication_links: List<Link>
  + update(time: float)
  + add_node(node: NetworkNode)
  + remove_node(node: NetworkNode)
  + get_network_state(): Dict
}

' Network Components
abstract class NetworkNode {
  # id: int
  # position: Position
  # power_state: bool
  # power_consumption: float
  # antennas: List<Antenna>
  + turn_on()
  + turn_off()
  + is_active(): bool
  + get_power_consumption(): float
}

class Position {
  + x: float
  + y: float
  + distance_to(other: Position): float
}

class Antenna {
  - type: str
  - gain: float
  + is_compatible_with(other: Antenna): bool
}

' Network Nodes
class BaseStation extends NetworkNode {
  - coverage_radius: float
  + calculate_coverage(): List[Position]
}

class HAPS extends NetworkNode {
  - altitude: float
  - coverage_area: float
  + update_solar_charging()
}

class LEO extends NetworkNode {
  - current_angle: float
  - angular_speed: float
  + update_position(time: float)
}

class UserDevice extends NetworkNode {
  - request_probability: float
  + generate_request(): bool
}

' Communication
class Link {
  - source: NetworkNode
  - target: NetworkNode
  - bandwidth: float
  - signal_power: float
  + calculate_capacity(): float
}

' Relationships
Simulation *-- Network
Simulation *-- DecisionMatrices
Simulation o-- BaseOptimizer

DecisionMatrices *-- "4" Matrix

BaseOptimizer --> DecisionMatrices
BaseOptimizer --> Network

Network o-- "1..*" NetworkNode
Network o-- "0..*" Link

NetworkNode *-- Position
NetworkNode o-- "1..*" Antenna

@enduml