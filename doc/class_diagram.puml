@startuml

' Core Components
class Simulation {
  - current_time: float
  - time_step: float
  - network: Network
  - matrices: DecisionMatrices
  - strategy: PowerStateStrategy
  - matrix_history: List
  - is_paused: bool
  + run() -> float
  + step() -> bool
  + reset()
  + set_strategy(strategy: PowerStateStrategy)
  + initialize_default_nodes()
  + set_nodes(node_type: type, count: int)
}

class DecisionMatrices {
  - matrices: Dict[MatrixType, ndarray]
  + generate_coverage_matrix(network: Network)
  + generate_request_matrix(num_requests: int, num_steps: int)
  + generate_power_matrix(num_devices: int, num_steps: int, strategy: PowerStateStrategy)
  + update_assignment_matrix(network: Network)
}

abstract class PowerStateStrategy {
  + {abstract} generate_power_matrix(num_devices: int, num_steps: int) -> ndarray
  + get_name() -> str
}

class AllOnStrategy extends PowerStateStrategy
class RandomStrategy extends PowerStateStrategy
class StaticRandomStrategy extends PowerStateStrategy

enum MatrixType {
  COVERAGE_ZONE
  POWER_STATE
  REQUEST
  ASSIGNMENT
}

class Network {
  - nodes: List[BaseNode]
  - communication_links: List[CommunicationLink]
  + add_node(node: BaseNode)
  + get_compute_nodes() -> List[BaseNode]
  + route_request(request: Request) -> bool
  + tick(time: float)
}

abstract class BaseNode {
  # node_id: int
  # position: Position
  # state: bool
  # antennas: List[Antenna]
  # energy_consumed: float
  # processing_queue: List[Request]
  + set_state(state: bool)
  + add_antenna(type: str, gain: float)
  + can_process(request: Request) -> bool
  + tick(time: float)
}

class Position {
  + x: float
  + y: float
  + distance_to(other: Position) -> float
}

class Antenna {
  - type: str
  - gain: float
  + is_compatible_with(other: Antenna) -> bool
}

class BaseStation extends BaseNode {
  - processing_frequency: float
}

class HAPS extends BaseNode {
  - battery_capacity: float
  - processing_frequency: float
  - transmission_power: float
}

class LEO extends BaseNode {
  - current_angle: float
  - angular_speed: float
  - battery_capacity: float
  + update_position(time: float)
}

class UserDevice extends BaseNode {
  - current_requests: List[Request]
  + add_request(request: Request)
}

class CommunicationLink {
  - node_a: BaseNode
  - node_b: BaseNode
  - transmission_queue: List[Request]
  + calculate_capacity() -> float
  + add_to_queue(request: Request)
  + tick(time: float)
}

class Request {
  - id: int
  - current_node: BaseNode
  - target_node: BaseNode
  - status: RequestStatus
  - size: float
  - priority: Priority
  - path: List[BaseNode]
  + update_status(new_status: RequestStatus)
}

enum RequestStatus {
  CREATED
  IN_TRANSIT
  IN_PROCESSING_QUEUE
  PROCESSING
  COMPLETED
  FAILED
}

' GUI Components
class SimulationUI {
  - sim_controls: SimulationControls
  - node_energy_graph: EnergyGraph
  - total_energy_graph: EnergyGraph
  + toggle_theme()
  + update_view()
}

class SimulationControls {
  - simulations: Dict[str, Simulation]
  - current_simulation: Simulation
  + create_new_simulation()
  + toggle_simulation()
  + reset_simulation()
}

' Relationships
Simulation *-- Network
Simulation *-- DecisionMatrices
Simulation o-- PowerStateStrategy

DecisionMatrices *-- MatrixType

Network o-- "1..*" BaseNode
Network o-- "0..*" CommunicationLink

BaseNode *-- Position
BaseNode o-- "1..*" Antenna
BaseNode o-- "0..*" Request

CommunicationLink o-- "0..*" Request

SimulationUI *-- SimulationControls
SimulationControls o-- "0..*" Simulation

@enduml